<script src="{{ url_for('static', filename='js/data/cards.js') }}"></script>
{% raw %}
<script type="text/x-template" id="bar-chart-card-template" >
  <div v-bind:class="'grid__'+size"  >
      <div class="base-card base-card--left" v-bind:class="'base-card--'+chartCardMetadata.color" >
          <div class="base-card__content" >
                <header class="base-card__header" style="display: flex; align-items: center;" >
                    <h3 class="base-card__heading" >{{ chartCardMetadata.title }}</h3>
                    <h4 class="base-card__subheading" style="margin-left: 5px">
                        (number of grants)
                    </h4>
                </header>
                <slot></slot>
                <template v-if="chartCardMetadata.chartType === 'bar-horizontal'">
                  <ul class="bar-chart">
                    <li
                    class="bar-chart__item"
                    ref="barItem"
                    v-bind:data-label="item.name ? item.name : item.key"
                    v-for="item in data.buckets"
                    v-if="item.selected"
                    :style="getBarStyle(item.doc_count, data.buckets)" v-on:click="updateData(item.url)">
                    <label class="bar-chart__label small" v-if="item.to && item.from">{{item.from}} - {{item.to}}</label>
                    <label class="bar-chart__label small" v-else-if="item.name">{{ item.name }}</label>
                    <label class="bar-chart__label small" v-else>{{ item.key }}</label>

                    <div class="bar-chart__bar"><span v-bind:data-val="item.doc_count.toLocaleString()"></span></span></div>
                    </li>
                  </ul>
                  <ul class="bar-chart hide-print" v-bind:style="find ? 'min-height: 400px' : ''">
                      <li
                      :class="!itemSelected ? 'bar-chart__item' : 'bar-chart__item inactive-bar'"
                      ref="barItem"
                      v-bind:data-label="item.name ? item.name : item.key"  v-for="item in data.buckets"
                      v-if="!item.selected"
                      :style="getBarStyle(item.doc_count, data.buckets)"
                      v-on:click="updateData(item.url)">

                      <label class="bar-chart__label small" v-if="item.to && item.from">{{item.from.toLocaleString()}} - {{item.to.toLocaleString()}}</label>
                      <label class="bar-chart__label small" v-else-if="item.name">{{ item.name }}</label>
                      <label class="bar-chart__label small" v-else>{{ item.key }}</label>

                      <div :class="!itemSelected ? 'bar-chart__bar' : 'bar-chart__bar inactive-bar'"><span v-bind:data-val="item.doc_count.toLocaleString()"></span></span></div>
                      </li>
                  </ul>
                </template>

                <template v-if="chartCardMetadata.chartType === 'bar-vertical'">
                  <bar-chart :chart-data="data.buckets" v-bind:height="100" v-bind:hide-legend="true">
          </bar-chart>
                </template>

                <!--- Extra in-place filters -->
                <input  v-if="chartCardMetadata.filterer && chartCardMetadata.filterer.type == 'finder' && data.buckets.length > 10" type="text" v-model="find" placeholder="Find a funder" class="search-field"   />
                <filter-item v-if="chartCardMetadata.filterer && chartCardMetadata.filterer.type == 'number'" title="Amount">
                    <label for="number-min">Between</label>
                    <input id="number-min" type="number" class="filter-input" placeholder="Minimum" v-model="filters.numberMin">
                    <label for="number-max">and</label>
                    <input id="number-max" type="number" class="filter-input" placeholder="Maximum" v-model="filters.numberMax">
                    <a href="#" v-on:click.prevent="filters.numberMax = null; filters.amountMin = null;" v-if="filters.amountMax || filters.amountMin">Clear amounts</a>
                </filter-item>
                <filter-item v-if="chartCardMetadata.filterer && chartCardMetadata.filterer.type == 'date'" title="Award date">
                  <label for="award-date-min">From</label>
                  <span>
                    <select id="award-date-min-month" name="month" class="filter-input">
                      <option selected></option>
                      <option value="01">January</option>
                      <option value="02">February</option>
                      <option value="03">March</option>
                      <option value="04">April</option>
                      <option value="05">May</option>
                      <option value="06">June</option>
                      <option value="07">July</option>
                      <option value="08">August</option>
                      <option value="09">September</option>
                      <option value="10">October</option>
                      <option value="11">November</option>
                      <option value="12">December</option>
                    </select>
                  </span>
                  <span>
                    <input id="award-date-min-year" type="text" class="filter-input" style="width: 6ch" placeholder="yyyy" minlength="4" maxlength="4">
                  </span>
                  <label for="award-date-max">to</label>
                  <span>
                    <select id="award-date-max-month" name="month" class="filter-input" >
                      <option selected></option>
                      <option value="01">January</option>
                      <option value="02">February</option>
                      <option value="03">March</option>
                      <option value="04">April</option>
                      <option value="05">May</option>
                      <option value="06">June</option>
                      <option value="07">July</option>
                      <option value="08">August</option>
                      <option value="09">September</option>
                      <option value="10">October</option>
                      <option value="11">November</option>
                      <option value="12">December</option>
                    </select>
                  </span>
                  <span>
                    <input id="award-date-max-year" type="text" class="filter-input" style="width: 6ch" placeholder="yyyy" minlength="4" maxlength="4">
                  </span>
                </filter-item>
                <div>
                <hr class="separator-light">
                <p>{{ chartCardMetadata.instructions }}</p>
                <p>Based on TODO  | formatNumber grants.</p>
                <p >
                    TODO | formatNumber grants not found.
                </p>
                </div>
            </div>
      </div>
  </div>
</script>


<script>

  function drawGraph () {
const dataset = [
            { label: "Category 1", value: 10 },
            { label: "Category 2", value: 20 },
            { label: "Category 3", value: 15 },
            { label: "Category 4", value: 5 },
            { label: "Category 5", value: 30 }
        ];
const width = 400;
        const height = 300;
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };

        // Create an SVG element
        const svg = d3.select("#chart")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Define the scale for the x-axis (category labels)
        const xScale = d3.scaleBand()
            .domain(dataset.map(d => d.label))
            .range([0, width])
            .padding(0.1);

        // Define the scale for the y-axis (values)
        const yScale = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.value)])
            .range([height, 0]);

        // Create and append the bars to the chart
        svg.selectAll(".bar")
            .data(dataset)
            .enter().append("rect")
            .attr("class", "bar")
            .attr("x", d => xScale(d.label))
            .attr("width", xScale.bandwidth())
            .attr("y", d => yScale(d.value))
            .attr("height", d => height - yScale(d.value));

        // Add x-axis to the chart
        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(xScale));

        // Add y-axis to the chart
        svg.append("g")
            .call(d3.axisLeft(yScale));
  }

function clamp(num, min, max){
    return Math.min(Math.max(num, min), max);
}


Vue.component('bar-chart-card', {
    template: "#bar-chart-card-template",
    props: {
        size: { type: String, default: "2" },
        loading: { type: Boolean, default: true },
        dataAll: { type: Object },
        dataId: { type: String },
    },
    data() {
        return {
            chartCardMetadata: chartCardMetadata[this.dataId],
            data: this.dataAll.aggregations[this.dataId],
            find: "",
            itemSelected: false,
            filters: {
                numberMin: 0,
                numberMax: 0,
            }
        };
    },
    methods: {
        getBarStyle(count, buckets){
            let maxValue = 1;

            try {
                maxValue = Math.max(...buckets.map((d) => d.doc_count));
            } catch(e) {
                console.warn(e);
            }


            return {
                '--value': count,
                '--width': `${clamp(((count / maxValue) * 100), 0.1, 100)}%`,
            }
        },
        updateData(url){
            this.find = "";
            this.itemSelected = true
            this.$emit("select", url);
        }
    },
    watch: {
        'dataAll': {
            handler: function() {
                this.data = this.dataAll.aggregations[this.dataId]
            },
            deep: true
        },
        'find': function () {
            var app = this;
            this.$refs.barItem.forEach((li) => {
                li.style.display = null;
                if (li.dataset.label && app.find && li.classList.contains("inactive-bar") && !li.dataset.label.toLowerCase().includes(app.find.toLowerCase())){
                    li.style.display = "none";
                }
            });
        }, /*
        'filters.numberMin': function(){
            TODO debounce , make URL param e.g. &min_amount=23&max_amount=55
            this.chartCardMetadata.filterers.fields[0];
        } */
    }
});
</script>

<!-- everything below To be deprecated -->
<script type="text/x-template" id="chart-card-template" >
  <div v-bind:class="'grid__'+size"  >
      <div class="base-card base-card--left" v-bind:class="'base-card--'+color" >
          <div class="base-card__content" >
              <slot></slot>
          </div>
      </div>
  </div>
</script>

<script type="text/x-template" id="chart-card-header-template">
  <header class="base-card__header" style="display: flex; align-items: center;" >
      <h3 class="base-card__heading" >{{ title }}</h3>
      <h4 class="base-card__subheading" style="margin-left: 5px">
        <slot></slot>
      </h4>
  </header>
</script>

<script>
    Vue.component('chart-card', {
        template: "#chart-card-template",
        props: {
            size: { type: String, default: "2" },
            color: { type: String, default: "yellow" },
            loading: { type: Boolean, default: true },
        },
    });

    Vue.component('chart-card-header', {
        template: "#chart-card-header-template",
        props: {
            title: { type: String },
        },
    });
</script>
{% endraw %}
