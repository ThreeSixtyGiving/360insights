{% raw %}
<script type="text/x-template" id="bar-chart-card-template" >
  <div v-bind:class="'grid__'+size"  >
      <div class="base-card base-card--left" v-bind:class="`base-card--${chartCardMetadata.color}`" >
          <div class="base-card__content" >
                <header class="base-card__header" style="display: flex; align-items: center;" >
                    <h3 class="base-card__heading" >{{ chartCardMetadata.title }}</h3>
                    <h4 class="base-card__subheading" style="margin-left: 5px">
                        (number of grants)
                    </h4>
                </header>
                <slot></slot>
                <template v-if="chartCardMetadata.chartType === 'bar-horizontal'">
                  <ul class="bar-chart">
                    <li
                    class="bar-chart__item"
                    ref="barItem"
                    v-bind:data-label="item.name ? item.name : item.key"
                    v-for="item in data.buckets"
                    v-if="item.selected || !itemsSelected"
                    :style="getBarStyle(item)" v-on:click="updateData(item.url)">

                      <label class="bar-chart__label small" v-if="item.to && item.from">£{{Number(item.from + 1).toLocaleString()}} - £{{item.to.toLocaleString()}}</label>
                      <label class="bar-chart__label small" v-else-if="item.name">{{ item.name }}</label>
                      <label class="bar-chart__label small" v-else-if="item.key === '0.0-500.0'">Up to £500</label>
                      <label class="bar-chart__label small" v-else-if="item.key === '1.0E7-*'">Over £10m</label>
                      <label class="bar-chart__label small" v-else>{{ item.key }}</label>

                    <div class="bar-chart__bar"><span v-bind:data-val="item.doc_count.toLocaleString()"></span></span></div>
                    </li>
                  </ul>
                  <ul class="bar-chart hide-print" v-if="itemsSelected" v-bind:style="find ? 'min-height: 400px' : ''">
                      <li
                      class="bar-chart__item inactive-bar"
                      ref="barItem"
                      v-for="item in data.buckets"
                      v-bind:data-label="item.name ? item.name : item.key"
                      v-if="!item.selected"
                      :style="getBarStyle(item)"
                      v-on:click="updateData(item.url);">

                      <label class="bar-chart__label small" v-if="item.to && item.from">£{{Number(item.from + 1).toLocaleString()}} - £{{item.to.toLocaleString()}}</label>
                      <label class="bar-chart__label small" v-else-if="item.name">{{ item.name }}</label>
                      <label class="bar-chart__label small" v-else-if="item.key === '0.0-500.0'">Up to £500</label>
                      <label class="bar-chart__label small" v-else-if="item.key === '1.0E7-*'">Over £10m</label>
                      <label class="bar-chart__label small" v-else>{{ item.key }}</label>

                      <div class="bar-chart__bar inactive-bar'"><span v-bind:data-val="item.doc_count.toLocaleString()"></span></span></div>
                      </li>
                  </ul>
                </template>

                <template v-if="chartCardMetadata.chartType === 'bar-vertical'">
                  <bar-chart :chart-data="data.buckets" v-if="data.buckets" v-bind:height="100" v-bind:hide-legend="true"></bar-chart>
                </template>

                <!--- Extra in-place filters -->
                <input  v-if="chartCardMetadata.filterer && chartCardMetadata.filterer.type == 'finder' && data.buckets.length > 10" type="text" v-model="find" :placeholder="`Find ${chartCardMetadata.title}`" class="search-field"   />
                <filter-item v-if="chartCardMetadata.filterer && chartCardMetadata.filterer.type == 'number'" title="Amount">
                    <label for="number-min">Between</label>
                    <input id="number-min" type="number" class="filter-input" placeholder="Minimum" v-model="filters.numberMin">
                    <label for="number-max">and</label>
                    <input id="number-max" type="number" class="filter-input" placeholder="Maximum" v-model="filters.numberMax">
                    <a href="#" v-on:click.prevent="filters.numberMax = null; filters.amountMin = null;" v-if="filters.amountMax || filters.amountMin">Clear amounts</a>
                </filter-item>
                <filter-item v-if="chartCardMetadata.filterer && chartCardMetadata.filterer.type == 'date'" title="Award date">
                  <label for="date-min">From</label>
                  <span>
                    <select id="date-min-month" name="month" class="filter-input" v-on:change="updateDateFilter()" v-model="filters.dates.min.month">
                      <option selected></option>
                      <option value="01">January</option>
                      <option value="02">February</option>
                      <option value="03">March</option>
                      <option value="04">April</option>
                      <option value="05">May</option>
                      <option value="06">June</option>
                      <option value="07">July</option>
                      <option value="08">August</option>
                      <option value="09">September</option>
                      <option value="10">October</option>
                      <option value="11">November</option>
                      <option value="12">December</option>
                    </select>
                  </span>
                  <span>
                    <input id="date-min-year" type="text" class="filter-input" style="width: 6ch" placeholder="yyyy" minlength="4" maxlength="4" v-on:change="updateDateFilter()" v-model="filters.dates.min.year">
                  </span>
                  <label for="date-max">to</label>
                  <span>
                    <select id="date-max-month" name="month" class="filter-input" v-on:change="updateDateFilter()" v-model="filters.dates.max.month">
                      <option selected></option>
                      <option value="01">January</option>
                      <option value="02">February</option>
                      <option value="03">March</option>
                      <option value="04">April</option>
                      <option value="05">May</option>
                      <option value="06">June</option>
                      <option value="07">July</option>
                      <option value="08">August</option>
                      <option value="09">September</option>
                      <option value="10">October</option>
                      <option value="11">November</option>
                      <option value="12">December</option>
                    </select>
                  </span>
                  <span>
                    <input id="date-max-year" type="text" class="filter-input" style="width: 6ch" placeholder="yyyy" minlength="4" maxlength="4" v-on:change="updateDateFilter()" v-model="filters.dates.max.year">
                  </span>
                </filter-item>
                <div>
                <hr class="separator-light">
                <p>{{ chartCardMetadata.instructions }}</p>
                </div>
            </div>
      </div>
  </div>
</script>


<script>
function clamp(num, min, max){
    return Math.min(Math.max(num, min), max);
}


Vue.component('bar-chart-card', {
    template: "#bar-chart-card-template",
    props: {
        size: { type: String, default: "2" },
        loading: { type: Boolean, default: true },
        dataAll: { type: Object },
        dataId: { type: String },
    },
    data() {
        return {
            chartCardMetadata: chartCardMetadata[this.dataId],
            // remove hyphenated identifier from dataId
            data: this.dataAll.aggregations[this.dataId.replace(/-(.*)$/gm, '')],
            maxValue: 0,
            find: "",
            itemsSelected: false,
            dateParams: false,
            filters: {
                numberMin: 0,
                numberMax: 0,
                dates: {
                    min: { month: null, year: null },
                    max: { month: null, year: null }
                }
            }
        };
    },
    methods: {
      updateMaxValue (buckets) {
        if (this.itemsSelected){
          this.maxValue = Math.max(...buckets.filter((d) => d.selected).map((d) => d.doc_count));
          return;
        }

        if (this.dataId === 'amountAwardedFixed') {
          this.maxValue = Math.max(...buckets.map((d) => d.doc_count));
        } else {
          this.maxValue = buckets[0].doc_count;
        }
      },
      getBarStyle(item) {
        if (!this.maxValue){
          /* no maxValue, running update */
          this.updateMaxValue(this.data.buckets);
        }
        return {
            '--value': item.doc_count,
            '--width': `${clamp(((item.doc_count / this.maxValue) * 100), 0.1, 100)}%`,
        }
      },
      updateData(url){
          this.find = "";
          this.itemsSelected = url.indexOf(this.dataId) != -1
          this.$emit("select", url);
      },
      updateDateFilter () {
        const url = `/search?`
        let minDate = ''
        let maxDate = ''
        let params = new URLSearchParams(document.location.search);

        if (this.filters.dates.min.month && this.filters.dates.min.year) {
          minDate = `${this.filters.dates.min.month}/${this.filters.dates.min.year}`
          params.set('min_date', minDate)
        }
        if (this.filters.dates.max.month && this.filters.dates.max.year) {
          maxDate = `${this.filters.dates.max.month}/${this.filters.dates.max.year}`
          params.set('max_date', maxDate)
        }

        if (minDate !== '' || maxDate !== '') {
          history.pushState({}, '', `?${params.toString()}`)
          this.$emit("select", `${url}${params.toString()}`)
        }
      }
    },
    mounted: function () {
      let params = new URLSearchParams(document.location.search);
      for (const [key, value] of params) {
        if (key.includes('min_date')) {
          this.dateParams = true;
          let string = value.split('/')

          this.filters.dates.min.month = string[0]
          this.filters.dates.min.year = string[1]
        }

        if (key.includes('max_date')) {
          this.dateParams = true;
          let string = value.split('/')

          this.filters.dates.max.month = string[0]
          this.filters.dates.max.year = string[1]
        }
      }

      this.dateParams && this.updateDateFilter()
    },
    watch: {
        'dataAll': {
            handler: function() {
              let newData = this.dataAll.aggregations[this.dataId.replace(/-(.*)$/gm, '')];
              /* Update the max value first so that new data has this value available */
              this.updateMaxValue(newData.buckets);
              /* Now update and trigger new load */
              this.data = newData;
            },
            deep: true
        },
        'find': function () {
            const app = this;
            this.$refs.barItem.forEach((li) => {
                li.style.display = null;
                if (li.dataset.label && app.find && !li.dataset.label.toLowerCase().includes(app.find.toLowerCase())){
                  if (this.itemsSelected) {
                    if (li.classList.contains("inactive-bar")) {
                      li.style.display = "none";
                    }
                  } else {
                    li.style.display = "none";
                  }
                }
            });
        },
        'filters.numberMin': function() {
          const app = this;
          this.$refs.barItem.forEach((li) => {
            li.style.display = null;
            let min = Number(app.filters.numberMin)
            let max = Number(app.filters.numberMax)
            console.log(li.dataset)
            let labels = li.dataset.label.split('-');
            if (min > Number(labels[1]) || max < Number(labels[0])) {
              if (this.itemsSelected) {
                if (li.classList.contains("inactive-bar")) {
                  li.style.display = "none";
                }
              } else {
                li.style.display = "none";
              }
            }
          })
        },
        'filters.numberMax': function() {
          const app = this;
          this.$refs.barItem.forEach((li) => {
            li.style.display = null;
            let min = Number(app.filters.numberMin)
            let max = Number(app.filters.numberMax)
            let labels = li.dataset.label.split('-');
            if (min > Number(labels[1]) || max < Number(labels[0])) {
              if (this.itemsSelected) {
                if (li.classList.contains("inactive-bar")) {
                  li.style.display = "none";
                }
              } else {
                li.style.display = "none";
              }
            }
          })
        }
    }
});
</script>
{% endraw %}
